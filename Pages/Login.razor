@page "/login"
@using Member.Model
@using Member.Service
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using Newtonsoft.Json
@inject IAppService AppService;
@inject NavigationManager NavManager;
@inject IJSRuntime JSRuntime;

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="Submit">
    <DataAnnotationsValidator/>
    <div class="form-group">
        <label>Email address</label>
        <input type="email" @bind-value="loginModel.email" class="form-control" placeholder="Email">
        <ValidationMessage For="@(()=> loginModel.email)" />
    </div>
    <div class="mt-2 form-group">
        <label>Password</label>
        <input type="password" @bind-value="loginModel.password" class="form-control" placeholder="Password">
        <ValidationMessage For="@(()=> loginModel.password)" />
    </div>

    <div class="mt-2 text-end">
        <NavLink class="nav-link" href="registration">
            <span>Click here to create new account?</span>
        </NavLink>
    </div>

    <div class="text-center mt-2">
        <button class="btn btn-primary" type="submit">
            <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
            SignIn
        </button>
    </div>
</EditForm>

@code
{
    LoginModel loginModel = new();
    RegistrationModel registrationModel = new();
    private string _spinnerClass = "";

    private async void Submit()
    {
        _spinnerClass = "spinner-border spinner-border-sm";
        var response = await AppService.AuthenticateUser(loginModel);
        if(response.IsSuccess)
        {
            var tokenResponse = JsonConvert.DeserializeObject<AuthenticateRequestAndResponse>(response.Content.ToString());

            var handler = new JwtSecurityTokenHandler();
            var jsontoken = handler.ReadToken(tokenResponse.AccessToken) as JwtSecurityToken;

            string userEmail = jsontoken.Claims.FirstOrDefault(f => f.Type == "email").Value;
            string name = jsontoken.Claims.FirstOrDefault(f => f.Type == "name").Value;

            string email = loginModel.email;
            string avatar = registrationModel.userAvatar;

            var userBasicDetail = new UserBasicDetail
            {
                Email = email,
                Name = name,
                AccessToken = tokenResponse.AccessToken,
                RefreshToken = tokenResponse.RefreshToken,
                UserID = userEmail,
                    UserAvatar = avatar
            };

            string userBasicInfoStr = JsonConvert.SerializeObject(userBasicDetail);
            await SecureStorage.SetAsync(nameof(Setting.UserBasicDetail), userBasicInfoStr);
            Setting.UserBasicDetail = userBasicDetail;

            NavManager.NavigateTo("/dashboard");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Oops", "Invalid username or password", "OK");
        }
        _spinnerClass = "";
        this.StateHasChanged();
    }
}